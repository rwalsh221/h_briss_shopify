{{ 'briss-customer-navigation.css' | asset_url | stylesheet_tag }}

<nav aria-label="customer navigation" class="customer-navigation">
    <ul role="list">
        <li id="customer-navigation__search">
            <div class="customer-navigation__icon">
                {{ images['icons_search.png'] | image_url: width:48, height: 48 | image_tag }}
            </div>
            {% render 'customer-navigation-search' %}
        </li>
        <li id="customer-navigation__account">
            <div class="customer-navigation__icon">    
            {{ images['icons_user.png'] | image_url: width:48, height: 48 | image_tag }}
            </div>
            {% render 'customer-navigation-customer' %}
        </li>
        <li id="customer-navigation__cart">
            <div class="customer-navigation__icon">
                {{ images['icons_basket.png'] | image_url: width:48, height: 48 | image_tag }}
            </div>
            {% render 'customer-navigation-cart' %}
        </li>
    </ul>
</nav>

{% javascript %}



function eventHandler(event) {
    closeCustomerNavigationModal(event,parentId)
}

const closeCustomerNavigationModal = (event, parentId,signal) => {
    console.log(parentId)
    console.log(event.target)
  if (event.target.id === parentId.id || parentId.contains(event.target)) {return}
    parentId.querySelector(".customer-navigation__content").style.display =
      "none";

    signal.abort()
  
};

const showCustomerNavigationModal = (event, elementId) => {
    if(event.target.id !== elementId) {
        return
    }
 const removeCloseModalListener = new AbortController();

    const parentId = event.target
    console.log(parentId)
    
  parentId.querySelector('.customer-navigation__content').style.display = "block";
  document.addEventListener('click', (event)=>{
    console.log('add doc lisntntnt')
    closeCustomerNavigationModal(event,parentId,removeCloseModalListener)},{signal: removeCloseModalListener.signal})
};



document.getElementById('customer-navigation__search').addEventListener('click', (e)=>{showCustomerNavigationModal(e,'customer-navigation__search')})
document.getElementById('customer-navigation__account').addEventListener('click', (e)=>{showCustomerNavigationModal(e,'customer-navigation__account')})
document.getElementById('customer-navigation__cart').addEventListener('click', (e)=>{showCustomerNavigationModal(e,'customer-navigation__cart')})



// CART API 

    const DOMStrings = {
        customerNavigationCart: document.getElementById('customer-navigation-cart'),
        customerNavigationCartTotal: document.getElementById('customer-navigation-cart-total'),
        cartProductCardAll: document.querySelectorAll('.cart-product-card'),
        cartProductQuantity: document.getElementById('cart-product__quantity'),
    }

    // NOT NEEDED HERE
    const addToCart = async () => {
        const addToCartReq = await fetch(`${window.Shopify.routes.root}cart/add.js`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(formData)
        })

        const addToCartRes = await addToCartReq.json()

        console.log(addToCartRes)
    }

    // addToCart()

    const updateCartPrice = async (productId) => {
        const url = new URLParse(window.location.href, true)
        console.log(url)
        
        const newUrl = url.toString()
        console.log(newUrl)
     
      
        try {
            // REQUEST HTML WITH UPDATED CART
            const getPriceReq = await fetch(newUrl)
            const getPriceRes = await getPriceReq.text()
            const parser = new DOMParser
            const html = parser.parseFromString(getPriceRes,'text/html')
      
            // UPDATE TOTAL CART PRICE

            const newCartTotal = html.getElementById('customer-navigation-cart-total').textContent
            DOMStrings.customerNavigationCartTotal.textContent = newCartTotal
      
            const newProductTotal = html.getElementById(`cpc-total-price-#${productId}`).textContent
            document.getElementById(`cpc-total-price-#${productId}`).textContent = newProductTotal

        } catch(error){
            console.log(error)
        }   
    }

    const updateProductQuantity = async (event) => {
        
        if(event.data === null || event.inputType === 'deleteContentBackward') {
            return
        }

        try {
            const productId = event.target.dataset.pid

            const updates = {
                [productId]: event.data
            }
           
            const updateProductQuantityReq = await fetch(`${window.Shopify.routes.root}cart/update.js`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ updates })
            })
            
            const updateProductQuantityRes = await updateProductQuantityReq.json()

            await updateCartPrice(productId)
            
        } catch (error) {
            console.error(error.message)
        }
    }

    DOMStrings.cartProductCardAll.forEach(
        (el) => el.addEventListener('input',(e)=>updateProductQuantity(e))
    )
{% endjavascript %}

{% comment %} {% schema %}
    {
        "name": "customer-navigation",
        "class": "grid__customer"
    }
{% endschema %} {% endcomment %}