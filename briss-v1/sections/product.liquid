{{ 'briss-product.css' | asset_url | stylesheet_tag }}

<script src="{{'briss-ProductContainer.js' | asset_url}}" defer></script>

{% assign variant_quantity_array = null | sort %}
{% for variant in product.variants %}
  {% assign variant_quantity = variant.inventory_quantity | sort %}
  {%  assign variant_id = variant.id | sort %}
   
  {% assign variant_quantity_array = variant_quantity_array | concat: variant_id %}
  {% assign variant_quantity_array = variant_quantity_array | concat: variant_quantity %}
{% endfor %}

<product-container id="product-container" data-variant-quantity='{{ variant_quantity_array | json  }}' data-product='{{ product | json | escape}}'>
<div class="product">
  <div class="product-img">
    {{ product.featured_image | image_url: width: 800, height: 800 | image_tag  }}
  </div>
  
  <div class="product-card">
    <div class="product-card__description">
      <h3 class="heading__tertiary product-card__title">{{ product.title }}</h3>
      <div>{{ product.description }}</div>
    </div>
    <div id="price-container" class="product-card__price-container">
      <h4 id="price-container-heading">Price</h4>
       {% if product.selected_or_first_available_variant.compare_at_price %}
        <p class="price product-card__price--old">{{- product.selected_or_first_available_variant.compare_at_price | money -}}</p>
        <p class="price product-card__price--new">{{- product.selected_or_first_available_variant.price | money -}}</p>
        <p class="price product-card__price--special">special</p>
      {% else %}
        <p class="price product-card__price">{{ product.selected_or_first_available_variant.price | money }}</p>
      {% endif %} 
      
    </div>
    <div class="product-card__form"> 
      {% form 'product', product %}
        <input id="product-id" type="hidden" name="id" value="{{ product.selected_or_first_available_variant.id }}">

        {% if product.variants.size > 1 %}
          <div class="product-option" id="product-option">
            
            {% for option in product.options_with_values %}
              <fieldset>
                <legend>{{ option.name }}</legend>
                <ul class="option-container">
                  {% for value in option.values %}
                    
                    <li id="radio-container-{{ value }}" 
                      class="radio-container 
                      {% if option == product.options_with_values.first and value.available == false %}option_disabled
                      {% elsif value.available == false %}disabled{% endif %}"
                      >
                      <input
                        {% if option.selected_value == value %}checked{% endif %} 
                        class="product_select_input"
                        type="radio"
                        name="{{ option.name }}"
                        value="{{ value }}"
                        id="{{ option.name | handleize }}-{{ value | handleize }}"
                      >
                      <label class="product_select_label" for="{{ option.name | handleize }}-{{ value | handleize }}">
                        {{ value }}
                      </label>
                    </li>
                
                {% endfor %}
              </ul>
              </fieldset> 
              
            {% endfor %}
          </div>
        {% endif %}

        <div class="quantity-container">
          <p>
            {% if product.selected_or_first_available_variant.inventory_quantity > 9 %}
              <span id="quantity-avaliable">10+</span>&nbsp;available 
            {% else %}  
              <span id="quantity-avaliable">{{ product.selected_or_first_available_variant.inventory_quantity}}</span>&nbsp;available  
            {% endif %}
          </p>
          <button id="quantity-decrease">-</button>
          {% if product.selected_or_first_available_variant.available %}
            <input type="text" name="quantity" min="1" max="{{ product.selected_or_first_available_variant.inventory_quantity }}" value="1" id="quantity" class="quantity-input">
          {% else %}
            <input type="text" name="quantity" min="0" max="0" value="0" id="quantity" class="quantity-input">
          {% endif %}
          <button id="quantity-increase">+</button>
        </div>

        <div class="product-card__add-to-cart">
          {% if product.selected_or_first_available_variant.available %}
            <p class="product-card__add-to-cart--subtotal">Subtotal:&nbsp;<span id="subtotal">{{ product.selected_or_first_available_variant.price | money }}</span></p>
            <input type="submit" value="Add to cart" id='add-to-cart' class="product-card__add-to-cart--btn" data-price="{{ product.selected_or_first_available_variant.price }}">
            {% else %}
            <p class="product-card__add-to-cart--subtotal">Subtotal:&nbsp;<span id="subtotal">{{ 0.00 | money }}</span></p>
            <input type="submit" disabled value="unavaliable" id='add-to-cart' class="product-card__add-to-cart--btn" data-price="{{ product.selected_or_first_available_variant.price }}">
          {% endif %}
        </div>
      {% endform %}
    </div>
  </div>
</div></product-container>

{% comment %} <script> {% endcomment %}
  {% comment %} shopify loads first product layout. add json as properrty of custom element. set selected variant as a attribute and wathc for change {% endcomment %}
  {% comment %} REFACTOR CREATE CUSTOM ELEMENT {% endcomment %}

  {% comment %} GET JSON FROM LIQUID VARIABLEs {% endcomment %}
  {% comment %} const variantQuantitys = {{ variant_quantity_array | json }}
  const product = {{ product | json }}
const productContainer =document.getElementById('product-container')
console.log(product)
productContainer.productData = product
productContainer.variantQuantitys = variantQuantitys
productContainer.test = 'hello'
console.dir(productContainer)
  const updateSubtotal = (quantity) => {
    const variantPrice = document.getElementById("add-to-cart").dataset.price;

    const subtotal = variantPrice * quantity;

    // convert to pounds pence
    let penceToPounds = subtotal / 100;
    penceToPounds = penceToPounds.toString();

    if (penceToPounds.indexOf(".") === penceToPounds.length - 2) {
      penceToPounds = `${penceToPounds}0`;
    }
    if (!penceToPounds.includes(".")) {
      penceToPounds = `${penceToPounds}.00`;
    }

    document.getElementById("subtotal").textContent = `£${penceToPounds}`;
  };

  const increaseQuantity = (event) => {
    event.preventDefault()
    
    const quantityInput = document.getElementById('quantity');
    if (parseInt(quantityInput.value) >= parseInt(quantityInput.max)) {
      return 
    }
    quantityInput.value = +quantityInput.value + 1;
    updateSubtotal(quantityInput.value)
  };

  const decreaseQuantity = (event) => {
    console.log('hghghghg')
    event.preventDefault()
    
    const quantityInput = document.getElementById('quantity');
    if (quantityInput.value === quantityInput.min) {
      return
    }
    quantityInput.value = +quantityInput.value - 1;
    updateSubtotal(quantityInput.value)
  };

  const setVariantUnavailable = () => {
    document.querySelectorAll('.radio-container').forEach(el=>{
      el.classList.remove('disabled')
    })

    const selectedRadio = document.querySelectorAll('.product-option input[type="radio"]:checked');

    const unavailableVariants = [];

    product.variants.forEach((el) => {
      if (el.option1 === selectedRadio[0].value && el.available === false) {
        unavailableVariants.push(el);
      }
    });

    unavailableVariants.forEach((el) => {
      document.getElementById(`radio-container-${el.option2}`).classList.add('disabled');
    });
  };

  // UPDATE VARIANT PRICE 
  const updateVariantPrice = async (matchedVariantId) => {
  
  const url = new URLParse(window.location.href, true);
  url.query.variant = matchedVariantId;
  const newUrl = url.toString();
  window.history.replaceState(null, null, newUrl);

  
  try {
    const htmlReq = await fetch(newUrl);
    const htmlRes = await htmlReq.text();
    const parser = new DOMParser();
    const html = parser.parseFromString(htmlRes, "text/html");
    const priceContainer = document.getElementById("price-container");

    while (
      priceContainer.lastChild &&
      priceContainer.lastChild.id !== "price-container-heading"
    ) {
      priceContainer.removeChild(priceContainer.lastChild);
    }

    const newPriceContent = html.querySelectorAll(".price");

    newPriceContent.forEach((el) => {
      priceContainer.insertAdjacentElement("beforeend", el);
    });
  } catch (error) {
    console.log(error);
  }
};

const disableAddToCart = (matchedVariantAvaliable) => {
  if (matchedVariantAvaliable === false) {
    document.querySelector("#add-to-cart").disabled = true;
    document.querySelector("#add-to-cart").value = "unavaliable";
  } else {
    document.querySelector("#add-to-cart").disabled = false;
    document.querySelector("#add-to-cart").value = "add to cart";
  }
};

{% comment %} SETS QUANTITY OF VARIANT AND INCREMENT {% endcomment %}
const setVariantQuantity = (matchedVariantId) => {
  const variantQuantity =
    variantQuantitys[variantQuantitys.indexOf(matchedVariantId) + 1];
  document.getElementById("quantity").max = variantQuantity;

  if (variantQuantity > 9) {
    document.getElementById("quantity-avaliable").textContent = "10+";
  } else {
    document.getElementById("quantity-avaliable").textContent = variantQuantity;
  }

  if (variantQuantity > 0) {
    document.getElementById("quantity").value = 1;
    updateSubtotal(1);
  } else {
    document.getElementById("quantity").value = 0;
    document.getElementById("subtotal").textContent = "£0.00";
  }
};

const onVariantChange = async () => {
  // find selected options
  const selectedOptions = [];

  document
    .querySelectorAll('.product-option input[type="radio"]:checked')
    .forEach((radio) => selectedOptions.push(radio.value));

  // find matched variant
  const matchedVariant = product.variants.find((variant) => {
    let pass = true;

    for (let i = 0; i < selectedOptions.length; i++) {
      if (selectedOptions.indexOf(variant.options[i]) === -1) {
        pass = false;
        break;
      }
    }
    return pass;
  });

  // Change product form variant id for add to cart
  document.querySelector("#product-id").value = matchedVariant.id;

  await updateVariantPrice(matchedVariant.id);

  setVariantUnavailable();

  setVariantQuantity(matchedVariant.id);

  disableAddToCart(matchedVariant.available);
};

document
  .querySelectorAll('.product-option input[type="radio"]')
  .forEach((radio) =>
    radio.addEventListener("change", async () => {
      onVariantChange();
    })
  );

  {% comment %} EVENT LISTENERS {% endcomment %}
  document.getElementById('quantity-increase').addEventListener('click', increaseQuantity)
  document.getElementById('quantity-decrease').addEventListener('click', decreaseQuantity)

  {% comment %} INIT {% endcomment %}
  setVariantUnavailable()
</script> {% endcomment %}


{% schema %}
    {
        "name": "product",
        "tag": "section",
        "limit": 1
     }
{% endschema %}